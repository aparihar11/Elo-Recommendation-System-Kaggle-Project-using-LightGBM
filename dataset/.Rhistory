library(forecast)
library(tseries)
library(Quandl)
library(scales)
library(xts)
library(ggplot2)
library(Ecdat)
library(dplyr)
library(rugarch)
library(aTSA)
library(plotly)
library(vars)
library(httr)
library(aod)
Quandl.api_key("b4Tdyv8xusy5mAQYxxnu")
Bitcoin.USD <- Quandl("BITFINEX/XRPUSD")
Bitcoin.xts <- xts(Bitcoin.USD[,-1],order.by = Bitcoin.USD$Date)
Bitcoin<-Bitcoin.xts$Last
ggplot(Bitcoin, aes(index(Bitcoin))) +
geom_line(aes(y=Bitcoin$Last, colour="XRP")) +   # plot the Bitcoin Prices
# plot the SP Prices
scale_colour_manual("",values = c("XRP" = "green"))+ #set colours and legend
labs(   # set title, subtitle, x axis label and y axis label
title = "XRP Price",
subtitle = "01/01/2016 to 31/12/2016",
x = "Date",
y = "Closing Price"
)
Bitcoin.xts$Last<-na.omit(Bitcoin.xts$Last)
adf.test(diff(Bitcoin.xts$Last))
ar.modelBitcoin <-auto.arima(Bitcoin.xts$Last, stepwise = FALSE, approximation = FALSE)
ar.modelBitcoin
forecastHorizon = 30
fcast.ar.bitcoin <- forecast::forecast(ar.modelBitcoin, h=forecastHorizon)
plot(fcast.ar.bitcoin,main = paste(forecastHorizon,"Day Forecast for Ripple"))
library(tidyRSS)
#CRYPTO_RSS_FEED
coin_telegraph<- tidyfeed("https://cointelegraph.com/feed/")
coin_desk<-tidyfeed("https://www.coindesk.com/feed/")
ccn<-tidyfeed("https://www.ccn.com/feed/")
blockchain_blog<-tidyfeed("https://blog.blockchain.com/feed/")
news_btc<-tidyfeed("https://www.newsbtc.com/feed/")
fork_log<-tidyfeed("http://forklog.net/feed/")
coin_desk<-tidyfeed("https://feeds.feedburner.com/CoinDesk")
#Add source column
coin_telegraph['source']<- "Coin TeleGraph"
coin_desk['source']<- "Coin desk"
ccn['source']<-"ccn"
blockchain_blog['source']<-"blockchain blog"
news_btc['source']<-"News BTC"
fork_log['source']<-"Fork log"
coin_desk['source']<-"Coin Desk"
#SUBSET COLUMNS
coin_telegraph<-subset(coin_telegraph,select=c("source","item_date_published","item_title","item_link"))
coin_desk<-subset(coin_desk,select=c("source","item_date_published","item_title","item_link"))
ccn<-subset(ccn,select=c("source","item_date_published","item_title","item_link"))
blockchain_blog<-subset(blockchain_blog,select=c("source","item_date_published","item_title","item_link"))
news_btc<-subset(news_btc,select=c("source","item_date_published","item_title","item_link"))
fork_log<-subset(fork_log,select=c("source","item_date_published","item_title","item_link"))
#write.csv(cisco_feed_clean, file="cisco_feed_clean.csv")
#read.csv("test123.csv", header = TRUE)
#######################################################################################################
#########COMBINE
crypto_feed<-rbind(coin_telegraph,coin_desk,ccn,blockchain_blog,news_btc,fork_log)
crypto_feed<-crypto_feed[order(as.Date(crypto_feed$item_date_published,format="%Y-%m-%d %H:%M:%S"),decreasing=TRUE),]
#full_feed$item_link <- paste0("<a href='",full_feed$item_link,"'>",full_feed$label,"</a>")
#### make link clickable
crypto_feed$item_link <- paste0("<a href='",crypto_feed$item_link,"' target='_blank'>more_info</a>")    #(open in new tab)
crypto_feed<-subset(crypto_feed,select=c("source","item_date_published","item_title","item_link"))
market_sentiment=sentiment_by(crypto_feed$item_title)
View(crypto_feed)
crypto_feed1<-crypto_feed[c(-1,-4)]
View(crypto_feed1)
library(ggplot2)
qplot(Sentiment$ave_sentiment,   geom="histogram",binwidth=0.1,main="Review Sentiment Histogram")
coin_desk<-tidyfeed("https://www.coindesk.com/feed/")
blockchain_blog<-tidyfeed("https://blog.blockchain.com/feed/")
ccn<-tidyfeed("https://www.ccn.com/feed/")
blockchain_blog<-tidyfeed("https://blog.blockchain.com/feed/")
#blockchain_blog<-tidyfeed("https://blog.blockchain.com/feed/")
news_btc<-tidyfeed("https://www.newsbtc.com/feed/")
coin_desk<-tidyfeed("https://feeds.feedburner.com/CoinDesk")
coin_telegraph['source']<- "Coin TeleGraph"
coin_desk['source']<- "Coin desk"
ccn['source']<-"ccn"
#blockchain_blog['source']<-"blockchain blog"
news_btc['source']<-"News BTC"
fork_log['source']<-"Fork log"
coin_desk['source']<-"Coin Desk"
coin_telegraph['source']<- "Coin TeleGraph"
coin_desk['source']<- "Coin desk"
ccn['source']<-"ccn"
#blockchain_blog['source']<-"blockchain blog"
news_btc['source']<-"News BTC"
#fork_log['source']<-"Fork log"
coin_desk['source']<-"Coin Desk"
coin_telegraph<-subset(coin_telegraph,select=c("source","item_date_published","item_title","item_link"))
coin_desk<-subset(coin_desk,select=c("source","item_date_published","item_title","item_link"))
ccn<-subset(ccn,select=c("source","item_date_published","item_title","item_link"))
#blockchain_blog<-subset(blockchain_blog,select=c("source","item_date_published","item_title","item_link"))
news_btc<-subset(news_btc,select=c("source","item_date_published","item_title","item_link"))
#fork_log<-subset(fork_log,select=c("source","item_date_published","item_title","item_link"))
crypto_feed<-rbind(coin_telegraph,coin_desk,ccn,news_btc)
crypto_feed<-crypto_feed[order(as.Date(crypto_feed$item_date_published,format="%Y-%m-%d %H:%M:%S"),decreasing=TRUE),]
crypto_feed$item_link <- paste0("<a href='",crypto_feed$item_link,"' target='_blank'>more_info</a>")    #(open in new tab)
crypto_feed<-subset(crypto_feed,select=c("source","item_date_published","item_title","item_link"))
market_sentiment=sentiment_by(crypto_feed$item_title)
View(crypto_feed)
crypto_feed1<-crypto_feed[c(-1,-4)]
View(crypto_feed1)
library(ggplot2)
qplot(Sentiment$ave_sentiment,   geom="histogram",binwidth=0.1,main="Review Sentiment Histogram")
market_sentiment=sentiment_by(crypto_feed$item_title)
View(crypto_feed)
crypto_feed1<-crypto_feed[c(-1,-4)]
View(crypto_feed1)
library(ggplot2)
qplot(market_sentiment$ave_sentiment,   geom="histogram",binwidth=0.1,main="Review Sentiment Histogram")
x<-c("tidyverse", "dplyr", "lubridata","ggplot2")
lapply(x, require, character.only = TRUE)
setwd("C:/Users/aparihar/Documents/GitHub/elo_recommendation/dataset")
save(train,test,histdata,newdata,merchants,sample,file="data.Rdata")
load("data.Rdata")
dim(train)
head(train)
glimpse(train)
head(test)
dim(histdata)
head(histdata)
hist_cat1 <- histdata %>% group_by(card_id,category_1) %>%
summarize(count=n())%>%
spread(key=category_1, value=count)
hist_cat2 <- histdata %>% group_by(card_id,category_2) %>%
summarize(count=n())%>%
spread(key=category_2, value=count)
hist_cat3 <- histdata %>% group_by(card_id,category_3) %>%
summarize(count=n())%>%
spread(key=category_3, value=count)
hist_summary2 <- histdata %>% group_by(card_id)%>%
summarise_at(vars(starts_with("merchant_"),starts_with("category")), n_distinct, na.rm = TRUE)
train <- read_csv("train.csv")
test <- read_csv("test.csv")
histdata <- read.csv("historical_transactions.csv",nrows = 100000)
newdata <- read_csv("new_merchant_transactions.csv",nrow=100000)
merchants <- read_csv("merchants.csv")
sample <- read_csv("sample_submission.csv")
save(train,test,histdata,newdata,merchants,sample,file="data.Rdata")
load("data.Rdata")
dim(train)
head(train)
glimpse(train)
head(test)
dim(histdata)
head(histdata)
hist_cat1 <- histdata %>% group_by(card_id,category_1) %>%
summarize(count=n())%>%
spread(key=category_1, value=count)
hist_cat2 <- histdata %>% group_by(card_id,category_2) %>%
summarize(count=n())%>%
spread(key=category_2, value=count)
hist_cat3 <- histdata %>% group_by(card_id,category_3) %>%
summarize(count=n())%>%
spread(key=category_3, value=count)
hist_summary2 <- histdata %>% group_by(card_id)%>%
summarise_at(vars(starts_with("merchant_"),starts_with("category")), n_distinct, na.rm = TRUE)
fn <- funs(sum, mean, min, max, sd, n_distinct, .args = list(na.rm = TRUE))
histdata$authorized_flag <- ifelse(histdata$authorized_flag == "Y",1,0)
hist_summary <- histdata %>%
group_by(card_id) %>%
select(c("card_id","purchase_amount","month_lag","installments","authorized_flag")) %>%
summarize_all(fn) %>%
left_join(hist_summary2,by="card_id") %>%
left_join(hist_summary3,by="card_id") %>%
left_join(hist_cat1,by="card_id") %>%
left_join(hist_cat2[,-7],by="card_id") %>%
left_join(hist_cat3[,-5],by="card_id")
head(hist_summary)
# purchase term, how many days between each transaction.
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
hist_summary3
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
head(histdata)
class(card_id)
class(histdata$card_id)
# purchase term, how many days between each transaction.
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
class(histdata$purchase_date)
as.integer(histdata$purchase_date)
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
as.integer(histdata$purchase_date)
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
source('~/GitHub/elo_recommendation/code/r_script.R', echo=TRUE)
source('~/GitHub/elo_recommendation/code/r_script.R', echo=TRUE)
source('~/GitHub/elo_recommendation/code/r_script.R', echo=TRUE)
newdata <- read.csv("new_merchant_transactions.csv",nrow=100000)
hist_cat1 <- histdata %>% group_by(card_id,category_1) %>%
summarize(count=n())%>%
spread(key=category_1, value=count)
hist_cat2 <- histdata %>% group_by(card_id,category_2) %>%
summarize(count=n())%>%
spread(key=category_2, value=count)
hist_cat3 <- histdata %>% group_by(card_id,category_3) %>%
summarize(count=n())%>%
spread(key=category_3, value=count)
hist_summary2 <- histdata %>% group_by(card_id)%>%
summarise_at(vars(starts_with("merchant_"),starts_with("category")), n_distinct, na.rm = TRUE)
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
filter(histdata, purchase_date  == "2999L")
filter(histdata, purchase_date  == 2999L)
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
histdata <- read.csv("historical_transactions.csv",nrows = 1000000)
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.integer(diff(range(purchase_date))),
avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
# purchase term, how many days between each transaction.
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = as.numeric(diff(range(purchase_date))),
avg_term = as.numeric(mean(abs(diff(order(purchase_date)))))
)
histdata$purchase_date<-as.integer(histdata$purchase_date)
# purchase term, how many days between each transaction.
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = diff(range(purchase_date)),
avg_term = (ean(abs(diff(order(purchase_date))))
)
)
# purchase term, how many days between each transaction.
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = diff(range(purchase_date)),
avg_term = mean(abs(diff(order(purchase_date))))
)
x<-c("tidyverse", "dplyr", "lubridate","ggplot2")
lapply(x, require, character.only = TRUE)
setwd("C:/Users/aparihar/Documents/GitHub/elo_recommendation/dataset")
train <- read_csv("train.csv")
test <- read_csv("test.csv")
histdata <- read.csv("historical_transactions.csv",nrows = 100000)
newdata <- read.csv("new_merchant_transactions.csv",nrow=100000)
merchants <- read_csv("merchants.csv")
sample <- read_csv("sample_submission.csv")
save(train,test,histdata,newdata,merchants,sample,file="data.Rdata")
load("data.Rdata")
hist_cat1 <- histdata %>% group_by(card_id,category_1) %>%
summarize(count=n())%>%
spread(key=category_1, value=count)
hist_cat2 <- histdata %>% group_by(card_id,category_2) %>%
summarize(count=n())%>%
spread(key=category_2, value=count)
hist_cat3 <- histdata %>% group_by(card_id,category_3) %>%
summarize(count=n())%>%
spread(key=category_3, value=count)
hist_summary2 <- histdata %>% group_by(card_id)%>%
summarise_at(vars(starts_with("merchant_"),starts_with("category")), n_distinct, na.rm = TRUE)
histdata$purchase_date<-as.integer(histdata$purchase_date)
# purchase term, how many days between each transaction.
hist_summary3 <- histdata %>% group_by(card_id)%>%
summarize(no_trans=n(),
pur_term = diff(range(purchase_date)),
avg_term = mean(abs(diff(order(purchase_date))))
)
fn <- funs(sum, mean, min, max, sd, n_distinct, .args = list(na.rm = TRUE))
histdata$authorized_flag <- ifelse(histdata$authorized_flag == "Y",1,0)
hist_summary <- histdata %>%
group_by(card_id) %>%
select(c("card_id","purchase_amount","month_lag","installments","authorized_flag")) %>%
summarize_all(fn) %>%
left_join(hist_summary2,by="card_id") %>%
left_join(hist_summary3,by="card_id") %>%
left_join(hist_cat1,by="card_id") %>%
left_join(hist_cat2[,-7],by="card_id") %>%
left_join(hist_cat3[,-5],by="card_id")
head(hist_summary)
# newdata category
new_cat1 <- newdata %>% group_by(card_id,category_1) %>%
summarize(count=n())%>%
spread(key=category_1, value=count)
new_cat2 <- newdata %>% group_by(card_id,category_2) %>%
summarize(count=n())%>%
spread(key=category_2, value=count)
new_cat3 <- newdata %>% group_by(card_id,category_3) %>%
summarize(count=n())%>%
spread(key=category_3, value=count)
# rename columns
colnames(new_cat1) <- c("card_id","new_N", "new_Y")
colnames(new_cat2) <- c("card_id","new1", "new2","new3","new4","new5","na")
colnames(new_cat3) <- c("card_id","new_A", "new_B", "new_C", "na")
new_merge <- newdata %>%
left_join(merchants, by="merchant_id",suffix = c("_new", "_m"))
new_summary2 <- new_merge %>% group_by(card_id)%>%
summarise_at(vars(starts_with("merchant_"),starts_with("category")), n_distinct, na.rm = TRUE)
new_summary3 <- new_merge %>%
group_by(card_id) %>%
summarise(
new_no_trans=n(),
new_pur_term = as.integer(diff(range(purchase_date))),
new_avg_term = as.integer(mean(abs(diff(order(purchase_date)))))
)
new_merge$purchase_date<-as.integer(new_merge$purchase_date)
new_merge$purchase_date<-as.integer(new_merge$purchase_date)
new_summary3 <- new_merge %>%
group_by(card_id) %>%
summarise(
new_no_trans=n(),
new_pur_term = diff(range(purchase_date)),
new_avg_term = mean(abs(diff(order(purchase_date))))
)
new_summary <- new_merge %>%
group_by(card_id) %>%
select(c("card_id","purchase_amount","month_lag","installments","authorized_flag","avg_purchases_lag3","avg_purchases_lag6","avg_purchases_lag12")) %>%
summarize_all(fn) %>%
left_join(new_summary2,by="card_id") %>%
left_join(new_summary3,by="card_id") %>%
left_join(new_cat1, by="card_id") %>%
left_join(new_cat2[,-7],by="card_id") %>%
left_join(new_cat3[,-5],by="card_id")
head(new_summary)
new_merge$authorized_flag <- ifelse(new_merge$authorized_flag == "Y",1,0)
new_summary <- new_merge %>%
group_by(card_id) %>%
select(c("card_id","purchase_amount","month_lag","installments","authorized_flag","avg_purchases_lag3","avg_purchases_lag6","avg_purchases_lag12")) %>%
summarize_all(fn) %>%
left_join(new_summary2,by="card_id") %>%
left_join(new_summary3,by="card_id") %>%
left_join(new_cat1, by="card_id") %>%
left_join(new_cat2[,-7],by="card_id") %>%
left_join(new_cat3[,-5],by="card_id")
head(new_summary)
# training data
train_data <- train %>%
mutate(first_active_month = ymd(first_active_month, truncated = 1),
year = year(first_active_month),
month = month(first_active_month),
howlong = as.integer(ymd("2018-02-01") - first_active_month)) %>%
left_join(hist_summary, by="card_id") %>%
left_join(new_summary,by="card_id",suffix = c("", "_new"))
head(train_data)
train_data[is.na(train_data)] <- 0
head(train_data)
dim(train_data)
test data
test_data <- test %>%
mutate(first_active_month = ymd(first_active_month, truncated = 1),
year = year(first_active_month),
month = month(first_active_month),
howlong = as.integer(ymd("2018-02-01") - first_active_month)) %>%
left_join(hist_summary, by="card_id") %>%
left_join(new_summary,by="card_id",suffix = c("", "_new"))
test_data1 <- test_data[,-c(1,2)]
test_data1[is.na(test_data1)] <- 0
data <- train_data[,-c(1,2)]
test.final <- test_data1
library(caret)
x<-c("tidyverse", "dplyr", "lubridate","ggplot2","caret")
lapply(x, require, character.only = TRUE)
set.seed(1)
inTrain <- createDataPartition(data$target, p=.8)[[1]]
dataTr <- data[inTrain,]
dataTs <- data[-inTrain,]
library(lightgbm)
# lgb dataset
train_s <- as.matrix(dataTr[,-4])
dtrain <- lgb.Dataset(data=train_s, label = dataTr$target)
test_s <- as.matrix(dataTs[,-4])
install.packages("lightgbm")
library(lightgbm)
# lgb dataset
train_s <- as.matrix(dataTr[,-4])
dtrain <- lgb.Dataset(data=train_s, label = dataTr$target)
test_s <- as.matrix(dataTs[,-4])
params <- list(objective="regression",
metric = "l2",
#                 min_sum_hessian_in_leaf = 1,
feature_fraction = 0.7,
bagging_fraction = 0.7,
bagging_freq = 5,
#                 min_data = 100,
max_bin = 50,
lambda_l1 = 8,
lambda_l2 = 1.3
#                 min_data_in_bin=100,
#                 min_gain_to_split = 10,
#                 min_data_in_leaf = 30
#is_unbalance = TRUE
)
lgb_m <- lgb.train(params=params,
data=dtrain,
min_data =1,
learning_rate=0.1,
nrounds = 500)
library(lightgbm)
install.packages("lightgbm")
library(devtools)
options(devtools.install.args = "--no-multiarch")
install_git("https://github.com/Microsoft/LightGBM", subdir = "R-package")
library(devtools)
options(devtools.install.args = "--no-multiarch")
install_git("https://github.com/Microsoft/LightGBM", subdir = "R-package")
library(lightgbm)
lgb.dl(commit = "master", compiler = "gcc", libdll = "",
repo = "https://github.com/Microsoft/LightGBM", use_gpu = FALSE,
cores = 1)
install.packages(lgbdll)
install.packages(lgbdl)
source("lgbdl")
source("lgbdl.R")
source("lgbdl.R")
lgb.dl(commit = "master", compiler = "gcc", libdll = "",
repo = "https://github.com/Microsoft/LightGBM", use_gpu = FALSE,
cores = 1)
library(lightgbm)
lgb_m <- lgb.train(params=params,
data=dtrain,
min_data =1,
learning_rate=0.1,
nrounds = 500)
lgb.dl(commit = "master", compiler = "gcc", libdll = "",
repo = "https://github.com/Microsoft/LightGBM", use_gpu = FALSE,
cores = 1)
lgb.dl(commit = "master", compiler = "gcc", libdll = "",
repo = "https://github.com/Microsoft/LightGBM", use_gpu = FALSE,
cores = 1)
install.CMake(URL = "https://cmake.org/download/", ...)
install.packages("install.cmake")
install.packages("install.CMake")
install.packages("remotes")
remotes::install_github("stnava/cmaker")
remotes::install_github("stnava/cmaker")
lgb.dl(commit = "master", compiler = "gcc", libdll = "",
repo = "https://github.com/Microsoft/LightGBM", use_gpu = FALSE,
cores = 1)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("stnava/cmaker")
remotes::install_github("stnava/cmaker",force=TRUE)
lgb.dl(commit = "master", compiler = "gcc", libdll = "",
repo = "https://github.com/Microsoft/LightGBM", use_gpu = FALSE,
cores = 1)
lgb.dl(commit = "master",
libdll = "C:\\LightGBM\\windows\\x64\\DLL\\lib_lightgbm.dll", # YOUR PRECOMPILED DLL
repo = "https://github.com/Microsoft/LightGBM")
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
lgb.dl(commit = "master",
libdll = "C:\\LightGBM\\windows\\x64\\DLL\\lib_lightgbm.dll", # YOUR PRECOMPILED DLL
repo = "https://github.com/Microsoft/LightGBM")
install_github("Microsoft/LightGBM", subdir = "R-package")
library(devtools)
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
install.packages(file.path("C:", "LightGBM", "R-package", fsep = "\\"), repos = NULL, type = "source")
library(lightgbm)
library(LightGBM)
library(devtools)
Rscript> install.packages(file.path("C:", "LightGBM", "R-package", fsep = "\\"), repos = NULL, type = "source")
install.packages(file.path("C:", "LightGBM", "R-package", fsep = "\\"), repos = NULL, type = "source")
install.packages(file.path("C:", "LightGBM", "R-package", fsep = "\\"), repos = NULL, type = "source")
install.packages("cmaker")
devtools::install_github("forexample/r-cmake")
devtools::install_github("stnava/cmaker")
librqry(cmaker)
library(cmaker)
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
